API Method | Post request uri                       | Description
----------------------------------------------------------------------------------------
Search     | ?api=search&search=JSON_STRING/NUMBER  | Search string is any string that may match a tag on a number.
           |                                        | This API will return a JSON string of the closest matching numbers.
		   |										| Or return the data associated with the number.
----------------------------------------------------------------------------------------
Import     | ?api=import&import=JSON_STRING         | Json string is an array matching the below schema.
----------------------------------------------------------------------------------------

Json Search Schema (POST)
------------------
[
	Tag(String)
]

Number Search Schema (POST)
------------------
PhoneNumber(String)

Json Import Schema (POST) / Json Search Schema (Response)
------------------
{
    PhoneNumber(String): {
        "description": Description(String),
        "tags": [
            Tag(String)
        ]
    }
}

Import behavior
------------------
The PhoneNumber key must always have a value.
If any of the values inside the "PhoneNumber" object are missing, the API will not touch the existing data.
If any of the keys in the schema are defined but the values are blank the API will erase the existing data.

Database Structure
------------------
All numbers are stored in their own file using JSON located in DB/numbers with a UID as the name of the file, and .DAT extention.
Each of these number files contains the phone number and the description of the number.

The tags are stored in the DB/tags.dat file using JSON. The schema for this file is shown below.

tags.dat Schema
------------------
{
    TagName(String): [
		NumberUID(String)
	]
}

numbers/uid.dat Schema
------------------
{
	"phonenumber": PhoneNumber(Number),
	"description": Description(String)
}

Database Performance
------------------
Since the database is storing each number individualy, the web server does not have to load any large database files.
All data that is needed for fast searching is located in the INDEX.DAT file.

